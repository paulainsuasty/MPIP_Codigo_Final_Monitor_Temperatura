# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'interfaz_captura_datos_mpl.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import keyboard
from PyQt5 import QtCore, QtGui, QtWidgets
from mplwidget import MplWidget
import serial
#from control_leds import control
import matplotlib.pyplot as plt
from PyQt5.QtWidgets import QApplication, QMainWindow
import subprocess
import matplotlib.animation as animation
from puerto import Puerto
import csv
import statistics
from datetime import *
import time
import serial
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import subprocess
from puerto import Puerto
import csv
import statistics
from datetime import *
import time

archivo = open("parametros_temperatura.csv", "r")
lineas = archivo.readlines()
datos = []
#datos.append(lineas)
for l in (lineas):
   # print(l)
   l = l.replace("\n", "")
   l = l.split(";")
   datos.append(l)
#print("datos son",datos)

class Ui_interfaz_captura_datos(object):
    def setupUi(self, interfaz_captura_datos):
        interfaz_captura_datos.setObjectName("interfaz_captura_datos")
        interfaz_captura_datos.resize(801, 361)
        self.centralwidget = QtWidgets.QWidget(interfaz_captura_datos)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(0, 50, 371, 241))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.cantidad_limitada = QtWidgets.QPushButton(self.verticalLayoutWidget, clicked = lambda : self.para_grafica_limitada())

        self.cantidad_limitada.setObjectName("cantidad_limitada")
        self.verticalLayout.addWidget(self.cantidad_limitada)
        self.tiempo_real = QtWidgets.QPushButton(self.verticalLayoutWidget, clicked = lambda : self.para_grafica_real())
        self.tiempo_real.setObjectName("tiempo_real")
        self.verticalLayout.addWidget(self.tiempo_real)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 9, 361, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.graphWidget = MplWidget(self.centralwidget)
        self.graphWidget.setGeometry(QtCore.QRect(410, 30, 371, 261))
        self.graphWidget.setObjectName("graphWidget")
        #ydata = [1,2,3,4,5,6,7,8]
        #self.graphWidget.canvas(ydata)
        self.graphWidget.canvas.ax.plot()
        self.graphWidget.canvas.draw()

        interfaz_captura_datos.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(interfaz_captura_datos)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 801, 21))
        self.menubar.setObjectName("menubar")
        interfaz_captura_datos.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(interfaz_captura_datos)
        self.statusbar.setObjectName("statusbar")
        interfaz_captura_datos.setStatusBar(self.statusbar)

        #self.label_2 = QtWidgets.QLabel(self.centralwidget)
        #self.label_2.setGeometry(QtCore.QRect(10, 9, 361, 600))
        #font = QtGui.QFont()
        #font.setPointSize(8)
        #self.label_2.setFont(font)
        #self.label_2.setObjectName("label")

        # self.label_3 = QtWidgets.QLabel(self.centralwidget)
        # self.label_3.setGeometry(QtCore.QRect(10, 9, 400, 600))
        # font = QtGui.QFont()
        # font.setPointSize(8)
        # self.label_3.setFont(font)
        # self.label_3.setObjectName("label")

        self.retranslateUi(interfaz_captura_datos)
        QtCore.QMetaObject.connectSlotsByName(interfaz_captura_datos)


    def retranslateUi(self, interfaz_captura_datos):
        _translate = QtCore.QCoreApplication.translate
        interfaz_captura_datos.setWindowTitle(_translate("interfaz_captura_datos", "MainWindow"))
        self.cantidad_limitada.setText(_translate("interfaz_captura_datos", "Escoger la cantidad de datos que deseas capturar"))
        self.tiempo_real.setText(_translate("interfaz_captura_datos", "Decidir hasta que momento se van a capturar datos durante la ejecución"))
        self.label.setText(_translate("interfaz_captura_datos", "Selecciona el método de captura de datos que deseas realizar:"))
        #self.label_2.setText(_translate("interfaz_captura_datos", "La información se almacenó en el archivo: " ))

    def para_grafica_limitada(self):
        puerto = serial.Serial("COM3", 9600)
        num_data_adquisicion = int(input("Ingresa la cantidad de datos que deseas adquirir: "))
        valores_temperatura = []
        fig, ax = plt.subplots()
        ydata = []

        pausa = False

        e = datetime.now()
        numeros_i = []
        for i in range (num_data_adquisicion):
            numeros_i.append(i)
            i = i+1

        for i in range(num_data_adquisicion):
            if not pausa:
                # global datos
                # punto = p.leer()
                # print(punto)
                punto = puerto.readline().decode().strip()  # leer del puerto
                valores_temperatura.append(float(punto))
                # print(punto)
                ydata.append(punto)
                self.graphWidget.canvas.ax.plot(ydata)
                #self.graphWidget.canvas.draw()
                #ax.clear()  # que la vaya limpiando y ploteando la lista
                #ax.plot(ydata)
                # control()
                # ani = animation.FuncAnimation(fig, ydata)
                # plt.show()
                ###
                if int(punto) >= int(datos[0][0]) and int(punto) <= int(datos[0][1]):
                    temp = "H"
                elif int(punto) > int(datos[1][0]) and int(punto) <= int(datos[1][1]):
                    temp = "N"
                elif int(punto) > int(datos[2][0]):
                    temp = "F"

                print("Temperatura y Categoria: ", punto, temp)
                puerto.write(temp.encode())
                plt.savefig(
                    str(date.today()) + str(e.hour) + str("_") + str(e.minute) + str("_") + str(e.second) + ".jpg")
                time.sleep(1)
                ###
            if i == num_data_adquisicion:
                print("terminé")
                pausa = True
            i = i + 1
            # intento()

        # ani = animation.FuncAnimation(fig, ydata)
        #plt.title("Temperatura (C)")
        #plt.xlabel("Numero de datos")
        #plt.ylabel("Temperatura")
        #plt.show()

        self.graphWidget.canvas.ax.plot(ydata)
        self.graphWidget.canvas.draw()

        print("La fecha de hoy es: ", date.today())

        # for i in range(num_data_adquisicion):
        #     dato = p.leer()
        #     print(dato)
        #     valores_temperatura.append(float(dato))

        print("Los", num_data_adquisicion, "valores de temperatura que solicitaste son: ")
        print(valores_temperatura)

        print("Guardando info en csv: ... ")
        e = datetime.now()
        nombre_archivo = str(date.today()) + str(e.hour) + str("_") + str(e.minute) + str("_") + str(e.second) + ".csv"
        f = open(nombre_archivo, "w")
        i = 0
        for i in range(len(valores_temperatura)):
            linea = ";".join([str(valores_temperatura[i])])
            f.write(linea + "\n")
            i = i + 1
        # f.write("el valor maximo encontrado fue: ")
        # f.write(str(max(valores_temperatura)) + "\n")
        # f.write("el valor minimo encontrado fue: ")
        # f.write(str(min(valores_temperatura)) + "\n")
        # f.write("el valor promedio es: ")
        # f.write(str(statistics.mean(valores_temperatura)) + "\n")
        f.close()

        # Puerto.close()

        print("Se ha guardo la información correctamente en el archivo: ", nombre_archivo)

###############################################################################################################

    def para_grafica_real(self):
        # pausa = False
        # if keyboard.is_pressed("a"):
        #     pausa = True
        #
        # def onclick(event):
        #      global pausa
        #      print("Pausa")
        #      pausa = True
        #     # ALMACENAR YDATA EN EL ARCHIVO
        # #fig, ax = plt.subplots()
        # #self.graphWidget.canvas.mpl_connect("button_press_event", onclick)
        #
        # ydata = []
        # e = datetime.now()
        # valores_temperatura= []
        # k = 0
        # #while not pausa:
        # for k in range (20):
        #     punto = puerto.readline().decode().strip()  # leer del puerto
        #     valores_temperatura.append(float(punto))
        #     # punto = p.leer()
        #     print(punto)
        #     # valores_temperatura.append(float(punto))
        #     # punto = p.readline().decode().strip() # leer del puerto
        #     # print(punto)
        #     ydata.append(punto)
        #     self.graphWidget.canvas.ax.plot(ydata)
        #     self.graphWidget.canvas.draw()
        #     #ax.clear()  # que la vaya limpiando y ploteando la lista
        #     #ax.plot(ydata)
        #     ###
        #     ### PARA LEDS
        #
        #     print("datos actuales son: ", datos)
        #     if int(punto) >= int(datos[0][0]) and int(punto) <= int(datos[0][1]):
        #         temp = "H"
        #     elif int(punto) > int(datos[1][0]) and int(punto) <= int(datos[1][1]):
        #         temp = "N"
        #     elif int(punto) > int(datos[2][0]):
        #         temp = "F"
        #
        #     print("Categoria: ", temp)
        #     puerto.write(temp.encode())
        #     time.sleep(1)
        #     #plt.savefig(
        #         #    str(date.today()) + str(e.hour) + str("_") + str(e.minute) + str("_") + str(e.second) + ".jpg")
        #         ###
        #
        #         ####
        #         # punto = puerto.readline().decode().strip() # leer del puerto
        #         # print(punto)
        #         # ydata.append(punto)
        #         # ax.clear() # que la vaya limpiando y ploteando la lista
        #         # ax.plot(ydata)
        #         #plt.title("Temperatura (C)")
        #         #plt.xlabel("Numero de datos")
        #         #plt.ylabel("Temperatura")
        #
        # #self.graphWidget.canvas.ax.plot(ydata)
        # #self.graphWidget.canvas.draw()
        #
        # # self.data_line = self.graphWidget.plot(ydata)
        # #
        # # self.timer = QtCore.QTimer()
        # # self.timer.setInterval(50)
        # # self.timer.timeout.connect(self.update_plot_data)
        # # self.timer.start()
        # #
        # # self.data_line.setData(ydata)
        #
        # # self.graphWidget.canvas.ax.plot(ydata)
        # # self.graphWidget.canvas.draw()
        #
        # #ani = animation.FuncAnimation(fig, update_data)
        # #plt.show()
        # # control()
        # k = k+1
        #
        # self.graphWidget.canvas.ax.plot(ydata)
        # self.graphWidget.canvas.draw()

        subprocess.call(['python36', "final_tiempo_real_lab_3.py"])
        #self.label_3.setText("interfaz_captura_datos", nombre_archivo)
from mplwidget import MplWidget


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    interfaz_captura_datos = QtWidgets.QMainWindow()
    ui = Ui_interfaz_captura_datos()
    ui.setupUi(interfaz_captura_datos)
    interfaz_captura_datos.show()
    sys.exit(app.exec_())
